name: CI Build & Test & Deploy

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev, main]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/kushumai/archi

jobs:

  block-non-dev-to-main:
    name: "Block PRs Not From Dev to Main"
    if: github.event_name == 'pull_request' && github.base_ref == 'main' && github.head_ref != 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Block PRs not from dev to main
        run: |
          echo "Only PRs from 'dev' to 'main' are allowed. This PR is from '${{ github.head_ref }}'."
          exit 1

  lint-buildCode-test:
    name: Lint, Build Code & Test (JS/TS)
    runs-on: ubuntu-latest
    services:
      auth_postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.AUTH_POSTGRES_PASSWORD }}
          POSTGRES_DB: authdb
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

      user_postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.USER_POSTGRES_PASSWORD }}
          POSTGRES_DB: userdb
        ports:
          - 5434:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

      document_postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DOCUMENT_POSTGRES_PASSWORD }}
          POSTGRES_DB: documentdb
        ports:
          - 5435:5432
        options: >-
          --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Inject .env for frontend
        working-directory: ./frontend
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.FRONTEND_ENV_FILE }}" > .env
          else
            echo "${{ secrets.FRONTEND_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for auth-service
        working-directory: ./auth-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.AUTH_ENV_FILE }}" > .env
          else
            echo "${{ secrets.AUTH_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for user-service
        working-directory: ./user-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.USER_ENV_FILE }}" > .env
          else
            echo "${{ secrets.USER_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for document-service
        working-directory: ./document-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.DOCUMENT_ENV_FILE }}" > .env
          else
            echo "${{ secrets.DOCUMENT_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for bff-service
        working-directory: ./bff-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.BFF_ENV_FILE }}" > .env
          else
            echo "${{ secrets.BFF_ENV_FILE_DEV }}" > .env
          fi

      - name: Lint, build, test all services
        env:
          AUTH_POSTGRES_PASSWORD: ${{ secrets.AUTH_POSTGRES_PASSWORD }}
          USER_POSTGRES_PASSWORD: ${{ secrets.USER_POSTGRES_PASSWORD }}
          DOCUMENT_POSTGRES_PASSWORD: ${{ secrets.DOCUMENT_POSTGRES_PASSWORD }}
        run: |
          for service in frontend auth-service user-service document-service bff-service; do
            echo "---- $service ----"
            cd ./$service
            npm ci
            npm run lint || true
            npm run build
            npm test -- --passWithNoTests
            cd ..
          done

  buildTest-docker:
    name: Build Docker Images (Check Only)
    needs: lint-buildCode-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images (check only)
        run: |
          for service in frontend auth-service user-service document-service bff-service; do
            docker build -f ./$service/Dockerfile ./$service
          done

  build-push-deploy:
    name: Build, Push & Deploy (Prod)
    if: github.ref == 'refs/heads/main'
    needs: lint-buildCode-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push auth-service
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/auth-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push user-service
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/user-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push document-service
        uses: docker/build-push-action@v5
        with:
          context: ./document-service
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/document-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push bff-service
        uses: docker/build-push-action@v5
        with:
          context: ./bff-service
          platforms: linux/arm64
          push: true
          tags: ${{ env.IMAGE_PREFIX }}/bff-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Inject .env for frontend
        working-directory: ./frontend
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.FRONTEND_ENV_FILE }}" > .env
          else
            echo "${{ secrets.FRONTEND_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for auth-service
        working-directory: ./auth-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.AUTH_ENV_FILE }}" > .env
          else
            echo "${{ secrets.AUTH_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for user-service
        working-directory: ./user-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.USER_ENV_FILE }}" > .env
          else
            echo "${{ secrets.USER_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for document-service
        working-directory: ./document-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.DOCUMENT_ENV_FILE }}" > .env
          else
            echo "${{ secrets.DOCUMENT_ENV_FILE_DEV }}" > .env
          fi

      - name: Inject .env for bff-service
        working-directory: ./bff-service
        run: |
          if [ "${GITHUB_REF##*/}" = "main" ]; then
            echo "${{ secrets.BFF_ENV_FILE }}" > .env
          else
            echo "${{ secrets.BFF_ENV_FILE_DEV }}" > .env
          fi

      - name: List and check .env files before transfer
        run: |
          for service in frontend auth-service user-service document-service bff-service; do
            if [ -f ./$service/.env ]; then
              echo "$service/.env exists and has size $(stat -c%s ./$service/.env) bytes"
              head -5 ./$service/.env || true
            else
              echo "$service/.env is MISSING!"
            fi
          done

      - name: Ensure .env files exist (warn, don't fail)
        run: |
          for service in frontend auth-service user-service document-service bff-service; do
            if [ ! -f ./$service/.env ] || [ ! -s ./$service/.env ]; then
              echo "WARNING: Missing or empty .env in $service (skip transfer)"
              rm -f ./$service/.env # Supprime le .env vide pour éviter que scp râle
            fi
          done

      - name: Copy .env files to Pi
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_SSH_PORT }}
          source: |
            ./frontend/.env
            ./auth-service/.env
            ./user-service/.env
            ./document-service/.env
            ./bff-service/.env
          target: ${{ secrets.PI_PROJECT_PATH }}

      - name: Deploy to Raspberry Pi via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PI_HOST }}
          username: ${{ secrets.PI_USER }}
          key: ${{ secrets.PI_SSH_KEY }}
          port: ${{ secrets.PI_SSH_PORT }}
          script: |
            cd ${{ secrets.PI_PROJECT_PATH }}
            git pull origin main
            docker compose -f docker-compose.yml pull
            docker compose -f docker-compose.yml up -d --build
            docker image prune -af
